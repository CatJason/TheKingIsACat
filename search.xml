<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/14/My-First-Blog/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h2 id="其他技术博客的链接"><a href="#其他技术博客的链接" class="headerlink" title="其他技术博客的链接"></a>其他技术博客的链接</h2><h3 id="『字节跳动』『android』"><a href="#『字节跳动』『android』" class="headerlink" title="『字节跳动』『android』"></a>『字节跳动』『android』</h3><p><a href="http://gityuan.com/" target="_blank" rel="noopener">http://gityuan.com/</a></p>
<h3 id="『西北工业大学』『硕士』"><a href="#『西北工业大学』『硕士』" class="headerlink" title="『西北工业大学』『硕士』"></a>『西北工业大学』『硕士』</h3><p><a href="https://qiming.info/" target="_blank" rel="noopener">https://qiming.info/</a></p>
]]></content>
  </entry>
  <entry>
    <title>Android通知栏</title>
    <url>/2021/02/03/Android%E9%80%9A%E7%9F%A5%E6%A0%8F/</url>
    <content><![CDATA[<p>Android 通知栏</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * 消息通知栏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   *      上下文</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> cl</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   *      需要跳转的Activity</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> tittle</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   *      通知栏标题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   *      通知栏内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   *      通知的标识符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(Context context, Class cl, String tittle, String content,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Intent intent = <span class="keyword">new</span> Intent(context, cl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      PendingIntent pendingIntent = PendingIntent.getActivity(context, <span class="number">0</span>, intent, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      String id = context.getPackageName();<span class="comment">//频道的ID。每个包必须是唯一的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//渠道名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      String name = context.getString(R.string.app_name);<span class="comment">//频道的用户可见名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建一个通知管理器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      NotificationManager notificationManager = (NotificationManager) context.getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Notification notification = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          NotificationChannel mChannel = <span class="keyword">new</span> NotificationChannel(id,name,NotificationManager.IMPORTANCE_LOW);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          notificationManager.createNotificationChannel(mChannel);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          notification = <span class="keyword">new</span> Notification.Builder(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setChannelId(id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setContentTitle(tittle)<span class="comment">//设置通知标题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setContentText(content)<span class="comment">//设置通知内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setSmallIcon(R.mipmap.icon4)<span class="comment">//设置小图标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setLargeIcon(BitmapFactory.decodeResource</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          (context.getResources(), R.mipmap.icon4))<span class="comment">//设置大图标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setContentIntent(pendingIntent)<span class="comment">//打开消息跳转到这儿</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setAutoCancel(<span class="keyword">false</span>)<span class="comment">// 将AutoCancel设为true后，当你点击通知栏的notification后，它会自动被取消消失</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setOngoing(<span class="keyword">true</span>)<span class="comment">//将Ongoing设为true 那么notification将不能滑动删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 从Android4.1开始，可以通过以下方法，设置notification的优先级，优先级越高的，通知排的越靠前，优先级低的，不会在手机最顶部的状态栏显示图标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="comment">//.setPriority(NotificationCompat.PRIORITY_MAX)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="comment">// Notification.DEFAULT_ALL：铃声、闪光、震动均系统默认。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="comment">// Notification.DEFAULT_SOUND：系统默认铃声。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="comment">// Notification.DEFAULT_VIBRATE：系统默认震动。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="comment">// Notification.DEFAULT_LIGHTS：系统默认闪光。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setDefaults(Notification.DEFAULT_ALL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .setVisibility(Notification.VISIBILITY_PUBLIC)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          NotificationCompat.Builder notificationBuilder =</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="keyword">new</span> NotificationCompat.Builder(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setContentTitle(tittle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setContentText(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setSmallIcon(R.mipmap.icon4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setLargeIcon(BitmapFactory.decodeResource</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                  (context.getResources(), R.mipmap.icon4))<span class="comment">//设置大图标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setVibrate(vibrate)<span class="comment">//震动</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setContentIntent(pendingIntent)<span class="comment">//打开消息跳转到这儿</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setAutoCancel(<span class="keyword">false</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setOngoing(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          <span class="comment">//.setPriority(NotificationCompat.PRIORITY_MAX)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setVisibility(Notification.VISIBILITY_PUBLIC)<span class="comment">//在锁屏上的显示</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setOngoing(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          .setChannel(id);<span class="comment">//无效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          notification = notificationBuilder.build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      notificationManager.notify(i, notification);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * 删除消息通知栏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   *      上下文</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   *      通知的标识符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Context context,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      NotificationManager notificationManager = (NotificationManager)     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      context.getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      notificationManager.cancel(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>KMP算法求next数组中的递推思想</title>
    <url>/2020/10/05/KMP%E7%AE%97%E6%B3%95%E6%B1%82next%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%92%E6%8E%A8%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<p>next 数组中的值代表着在字串每一处匹配失败时对应的指针应该移动的位置</p>
<a id="more"></a>

<h1 id="KMP-算法求-next-数组中的递推思想"><a href="#KMP-算法求-next-数组中的递推思想" class="headerlink" title="KMP 算法求 next 数组中的递推思想"></a>KMP 算法求 next 数组中的递推思想</h1><h2 id="简单的模式匹配算法寻找公共前缀"><a href="#简单的模式匹配算法寻找公共前缀" class="headerlink" title="简单的模式匹配算法寻找公共前缀"></a>简单的模式匹配算法寻找公共前缀</h2><p>模式串/主串：abaabcac</p>
<p>子串：abaabcac                                                        </p>
<p> 用 <strong>i</strong> 指针做 S1 的访问指针</p>
<p>用 <strong>j</strong> 指针做 S2 的访问指针</p>
<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>主串 S1：#abaabcac</p>
<p>子串 S2：##abaabcac (#为万能匹配符号)</p>
<h2 id="构成递推的（最重要但最容易被忽视的）条件"><a href="#构成递推的（最重要但最容易被忽视的）条件" class="headerlink" title="构成递推的（最重要但最容易被忽视的）条件"></a>构成递推的（最重要但最容易被忽视的）条件</h2><p><strong>字串在 i = n 时匹配失败，n 前面 n-1 个字符比需都匹配成功</strong></p>
<p>用下划线表示指针 i 指向的位置，加粗表示匹配失败的位置</p>
<table>
<thead>
<tr>
<th align="center">匹配失败时指针数值</th>
<th align="center">匹配失败位置</th>
<th align="center">达成所需前提条件</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i = 0</td>
<td align="center"><strong><u>#</u></strong></td>
<td align="center">/</td>
</tr>
<tr>
<td align="center">i = 1</td>
<td align="center">#<u><strong>a</strong></u></td>
<td align="center">需要 i = 0 处匹配成功</td>
</tr>
<tr>
<td align="center">i = 2</td>
<td align="center">#a<u><strong>b</strong></u></td>
<td align="center">需要 i = 1 处匹配成功</td>
</tr>
<tr>
<td align="center">i = 3</td>
<td align="center">#ab<u><strong>a</strong></u></td>
<td align="center">需要 i = 2 处匹配成功</td>
</tr>
<tr>
<td align="center">i = 4</td>
<td align="center">#aba<strong><u>a</u></strong></td>
<td align="center">需要 i = 3 处匹配成功</td>
</tr>
<tr>
<td align="center">i = 5</td>
<td align="center">#abaa<u><strong>b</strong></u></td>
<td align="center">需要 i = 4 处匹配成功</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
<h2 id="寻找递推规律"><a href="#寻找递推规律" class="headerlink" title="寻找递推规律"></a>寻找递推规律</h2><h3 id="任意位置匹配成功时"><a href="#任意位置匹配成功时" class="headerlink" title="任意位置匹配成功时"></a>任意位置匹配成功时</h3><p>只需将 指针 i 与指针 j 均向后移动一个位置即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">i++;</span><br><span class="line">j++:</span><br></pre></td></tr></table></figure>

<h3 id="在主串任意位置匹配失败时"><a href="#在主串任意位置匹配失败时" class="headerlink" title="在主串任意位置匹配失败时"></a>在主串任意位置匹配失败时</h3><p>在某一处失败时，</p>
<ul>
<li><p>模式串在 <strong>i = 0</strong> 处与待搜索文本中的某个字符匹配</p>
<p>必然匹配成功，不需要前提条件，<strong>next[0] =  0</strong></p>
</li>
<li><p>模式串在 <strong>i = 1</strong> 处与待搜索文本中的某个字符匹配失败</p>
<p>#<u><strong>a</strong></u>baabcac</p>
<p>分析模式串结构</p>
<p>S1：#<strong><u>a</u></strong>baabcac</p>
<p>S2：#<strong><u>#</u></strong>abaabcac</p>
<p>由于 i = 0 必然匹配成功，想要在 i = 1 处继续重新开始匹配，直接开始匹配不需要前提条件，不需要额外的指针操作，对应 <strong>next[1] = 0</strong></p>
</li>
<li><p>模式串在 <strong>i = 2</strong> 处与待搜索文本中的某个字符匹配失败</p>
<p>#<u><strong>a</strong></u>baabcac</p>
<p>分析模式串结构</p>
<p>S1: #<u>a</u>baabcac</p>
<p>S2: #<u>#</u>abaabcac</p>
<p>想要在 i = 2 处继续重新开始匹配，需要满足 i = 1 处匹配成功的前提条件，需要将指针 j 指针向前移动一位至 # </p>
<p>构造出 i = 1 处匹配成功</p>
<p>对应 <strong>next[2] = 0 + 1 = 1</strong></p>
</li>
<li><p>模式串在 <strong>i = 3</strong> 处与待搜索文本中的某个字符匹配失败</p>
<p>#<u><strong>a</strong></u>baabcac</p>
<p>想要在 i = 2 处继续重新开始匹配，需要满足 i = 1 处匹配成功的前提条件，需要再将指针 j 指针向前移动一位至 # </p>
<p>S: a<u>b</u>aabcac</p>
<p>T:  #<u>#</u>abaabcac</p>
<p>构造出 i = 1 处匹配成功</p>
<p>对应 <strong>next[2] = 0 + 1 = 1</strong></p>
</li>
<li><p>在 <strong>i = 3</strong> 处匹配失败</p>
<p>S: #ab<u><strong>a</strong></u>abcac</p>
<p>T: ##a<u><strong>b</strong></u>aabcac</p>
<p>想要在 i = 2 处继续重新开始匹配，需要满足 i = 1 处匹配成功的前提条件，需要先将指针 j 指针向前移动一位至 # </p>
<p>S: a<u>b</u>aabcac</p>
<p>T:  #<u>#</u>abaabcac</p>
<p>构造出 i = 1 处匹配成功</p>
<p>对应 <strong>next[2] = 0 + 1 = 1</strong></p>
</li>
<li><p>在 <strong>i = 4</strong> 处匹配失败</p>
<p>S: a<u><strong>b</strong></u>aabcac</p>
<p>T: #<u><strong>a</strong></u>baabcac</p>
<p>想要在 i = 2 处继续重新开始匹配，需要满足 i = 1 处匹配成功的前提条件，需要先将指针 j 指针向前移动一位至 # </p>
<p>S: a<u>b</u>aabcac</p>
<p>T:  #<u>#</u>abaabcac</p>
<p>构造出 i = 1 处匹配成功</p>
<p>对应 <strong>next[2] = 0 + 1 = 1</strong></p>
</li>
<li></li>
<li></li>
<li></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>「转」单例模式DCL</title>
    <url>/2020/08/13/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8FDCL/</url>
    <content><![CDATA[<p>原文连接：<a href="https://www.cnblogs.com/xz816111/p/8470048.html" target="_blank" rel="noopener">Java中的双重检查锁（double checked locking）</a></p>
<p>作者：<a href="https://home.cnblogs.com/u/xz816111/" target="_blank" rel="noopener">Decouple</a></p>
<a id="more"></a>

<p><strong>双检锁/双重校验锁（DCL，即 double-checked locking）</strong></p>
<p><strong>JDK 版本：</strong>JDK1.5 起</p>
<p><strong>是否 Lazy 初始化：</strong>是</p>
<p><strong>是否多线程安全：</strong>是</p>
<p><strong>实现难度：</strong>较复杂</p>
<p><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>在实现单例模式时，如果未考虑多线程的情况，就容易写出下面的错误代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueSingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == uniqueSingleton) &#123;</span><br><span class="line">            uniqueSingleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在多线程的情况下，这样写可能会导致<code>uniqueSingleton</code>有多个实例。比如下面这种情况，考虑有两个线程同时调用<code>getInstance()</code>：</p>
<table>
<thead>
<tr>
<th align="left">Time</th>
<th align="left">Thread A</th>
<th align="left">Thread B</th>
</tr>
</thead>
<tbody><tr>
<td align="left">T1</td>
<td align="left">检查到<code>uniqueSingleton</code>为空</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">T2</td>
<td align="left"></td>
<td align="left">检查到<code>uniqueSingleton</code>为空</td>
</tr>
<tr>
<td align="left">T3</td>
<td align="left"></td>
<td align="left">初始化对象<code>A</code></td>
</tr>
<tr>
<td align="left">T4</td>
<td align="left"></td>
<td align="left">返回对象<code>A</code></td>
</tr>
<tr>
<td align="left">T5</td>
<td align="left">初始化对象<code>B</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">T6</td>
<td align="left">返回对象<code>B</code></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>可以看到，<code>uniqueSingleton</code>被实例化了两次并且被不同对象持有。完全违背了单例的初衷。</p>
<h1 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h1><p>出现这种情况，第一反应就是加锁，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueSingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == uniqueSingleton) &#123;</span><br><span class="line">            uniqueSingleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样虽然解决了问题，但是因为用到了<code>synchronized</code>，会导致很大的性能开销，并且加锁其实只需要在第一次初始化的时候用到，之后的调用都没必要再进行加锁。</p>
<h1 id="双重检查锁"><a href="#双重检查锁" class="headerlink" title="双重检查锁"></a>双重检查锁</h1><p>双重检查锁（double checked locking）是对上述问题的一种优化。先判断对象是否已经被初始化，再决定要不要加锁。</p>
<h2 id="错误的双重检查锁"><a href="#错误的双重检查锁" class="headerlink" title="错误的双重检查锁"></a>错误的双重检查锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueSingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == uniqueSingleton) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == uniqueSingleton) &#123;</span><br><span class="line">                    uniqueSingleton = <span class="keyword">new</span> Singleton();   <span class="comment">// error</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果这样写，运行顺序就成了：</p>
<ol>
<li>检查变量是否被初始化(不去获得锁)，如果已被初始化则立即返回。</li>
<li>获取锁。</li>
<li>再次检查变量是否已经被初始化，如果还没被初始化就初始化一个对象。</li>
</ol>
<p>执行双重检查是因为，如果多个线程同时了通过了第一次检查，并且其中一个线程首先通过了第二次检查并实例化了对象，那么剩余通过了第一次检查的线程就不会再去实例化对象。</p>
<p>这样，除了初始化的时候会出现加锁的情况，后续的所有调用都会避免加锁而直接返回，解决了性能消耗的问题。</p>
<h3 id="隐患"><a href="#隐患" class="headerlink" title="隐患"></a>隐患</h3><p>上述写法看似解决了问题，但是有个很大的隐患。实例化对象的那行代码（标记为error的那行），实际上可以分解成以下三个步骤：</p>
<ol>
<li>分配内存空间</li>
<li>初始化对象</li>
<li>将对象指向刚分配的内存空间</li>
</ol>
<p>但是有些编译器为了性能的原因，可能会将第二步和第三步进行<strong>重排序</strong>，顺序就成了：</p>
<ol>
<li>分配内存空间</li>
<li>将对象指向刚分配的内存空间</li>
<li>初始化对象</li>
</ol>
<p>现在考虑重排序后，两个线程发生了以下调用：</p>
<table>
<thead>
<tr>
<th align="left">Time</th>
<th align="left">Thread A</th>
<th align="left">Thread B</th>
</tr>
</thead>
<tbody><tr>
<td align="left">T1</td>
<td align="left">检查到<code>uniqueSingleton</code>为空</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">T2</td>
<td align="left">获取锁</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">T3</td>
<td align="left">再次检查到<code>uniqueSingleton</code>为空</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">T4</td>
<td align="left">为<code>uniqueSingleton</code>分配内存空间</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">T5</td>
<td align="left">将<code>uniqueSingleton</code>指向内存空间</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">T6</td>
<td align="left"></td>
<td align="left">检查到<code>uniqueSingleton</code>不为空</td>
</tr>
<tr>
<td align="left">T7</td>
<td align="left"></td>
<td align="left">访问<code>uniqueSingleton</code>（此时对象还未完成初始化）</td>
</tr>
<tr>
<td align="left">T8</td>
<td align="left">初始化<code>uniqueSingleton</code></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>在这种情况下，T7时刻线程B对<code>uniqueSingleton</code>的访问，访问的是一个<strong>初始化未完成</strong>的对象。</p>
<h2 id="正确的双重检查锁"><a href="#正确的双重检查锁" class="headerlink" title="正确的双重检查锁"></a>正确的双重检查锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueSingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == uniqueSingleton) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == uniqueSingleton) &#123;</span><br><span class="line">                    uniqueSingleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了解决上述问题，需要在<code>uniqueSingleton</code>前加入关键字<code>volatile</code>。使用了volatile关键字后，重排序被禁止，所有的写（write）操作都将发生在读（read）操作之前。</p>
<p>至此，双重检查锁就可以完美工作了。</p>
<p>参考资料：</p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/双重检查锁定模式" target="_blank" rel="noopener">双重检查锁定模式</a></li>
<li><a href="http://www.importnew.com/12196.html" target="_blank" rel="noopener">如何在Java中使用双重检查锁实现单例</a></li>
<li><a href="http://www.infoq.com/cn/articles/double-checked-locking-with-delay-initialization#anch136785" target="_blank" rel="noopener">双重检查锁定与延迟初始化</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>详解KMP算法</title>
    <url>/2020/03/25/%E8%AF%A6%E8%A7%A3KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>因为发现网上缺少kmp算法的详细解析，大多解析又是从数学角度解释kmp算法的原理，让人云里雾里看不明白，故有了这篇文章，主要对kmp算法难点求next[]数组的算法进行详细解析。</p>
<a id="more"></a>

<p><img src="/images/pictures/%E8%AF%A6%E8%A7%A3KMP%E7%AE%97%E6%B3%95/1.jpeg" alt="success"></p>
<p><img src="/images/pictures/%E8%AF%A6%E8%A7%A3KMP%E7%AE%97%E6%B3%95/2.jpeg" alt="success"></p>
<p><img src="/images/pictures/%E8%AF%A6%E8%A7%A3KMP%E7%AE%97%E6%B3%95/3.jpeg" alt="success"></p>
<p><img src="/images/pictures/%E8%AF%A6%E8%A7%A3KMP%E7%AE%97%E6%B3%95/4.jpeg" alt="success"></p>
]]></content>
  </entry>
  <entry>
    <title>算法分析步骤</title>
    <url>/2020/03/23/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<ol>
<li>首先说明采用哪些数据结构，分别做什么操作</li>
<li>对采用的数据结构中的变量、指针和参数加以说明</li>
<li>对程序整体的初始状态、运行状态、结束状态依次加以说明</li>
</ol>
]]></content>
      <categories>
        <category>学习方法</category>
      </categories>
  </entry>
  <entry>
    <title>查找与排序</title>
    <url>/2020/03/02/%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="查找与排序的关系"><a href="#查找与排序的关系" class="headerlink" title="查找与排序的关系"></a>查找与排序的关系</h2><p>排序的过程</p>
<ol>
<li>选择元素/位置</li>
<li>根据元素<strong>查找</strong>位置/根据位置<strong>查找</strong>元素</li>
<li>排序</li>
</ol>
<p><strong>所以查找是排序的前提，不同的查找方式导致了不同的排序方式</strong></p>
<a id="more"></a>

<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>根据元素查找位置</p>
<ul>
<li><h6 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a><strong>顺序查找</strong></h6></li>
<li><h6 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a><strong>折半查找</strong></h6></li>
<li><h6 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a><strong>分块查找</strong></h6></li>
</ul>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h4 id="根据元素查找位置"><a href="#根据元素查找位置" class="headerlink" title="根据元素查找位置"></a>根据元素查找位置</h4><ul>
<li><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><ul>
<li><h6 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a><strong>直接插入排序</strong></h6><p>顺序查找</p>
</li>
<li><h6 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a><strong>折半插入排序</strong></h6><p>折半查找</p>
</li>
<li><h6 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a><strong>希尔排序</strong></h6><p>分块查找</p>
</li>
</ul>
</li>
</ul>
<h4 id="根据位置查找元素"><a href="#根据位置查找元素" class="headerlink" title="根据位置查找元素"></a>根据位置查找元素</h4><ul>
<li><h5 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h5><ul>
<li><h6 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h6><p>选择无序表表尾的位置</p>
</li>
<li><h6 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><strong>快速排序</strong></h6><p>分治思想，一趟排序递归选择多个位置，递归排序</p>
</li>
</ul>
</li>
<li><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><ul>
<li><h6 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a><strong>简单选择排序</strong></h6><p>选择线性表中无序表表尾位置</p>
</li>
<li><h6 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a><strong>堆排序</strong></h6><p>选择树形结构的根或其子树的根结点</p>
</li>
</ul>
<p>堆排序之所以容易出错，是因为它是上述唯一的<strong>已排序的有序部分会在排序过程中再次变为无序</strong>的排序算法，这也是堆排序的数据结构是树这种递归结构却不能使用分治递归排序的原因。</p>
</li>
</ul>
<h4 id="两种特殊的排序算法"><a href="#两种特殊的排序算法" class="headerlink" title="两种特殊的排序算法"></a>两种特殊的排序算法</h4><ul>
<li><h6 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a><strong>归并排序</strong></h6><p>子表之间是无序的（分治思想中，子表之间是有序的）。</p>
</li>
<li><h6 id="基排序"><a href="#基排序" class="headerlink" title="基排序"></a><strong>基排序</strong></h6><p>已排序的有序部分会在排序过程中再次变为无序，与堆排序不同，不用再次进行排序。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
</search>
